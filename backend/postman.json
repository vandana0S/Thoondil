{
  "info": {
    "name": "Fish Delivery API",
    "description": "Complete API collection for Fish Delivery application with authentication, user management, and address management endpoints",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{authToken}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000/api/v1",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    },
    {
      "key": "addressId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Health Check",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/../../health",
          "host": ["{{baseUrl}}"],
          "path": ["../../health"]
        },
        "description": "Check if the API server is running"
      },
      "response": []
    },
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('authToken', response.token);",
                  "    pm.environment.set('userId', response.user._id);",
                  "    pm.test('Registration successful', function () {",
                  "        pm.expect(response.success).to.be.true;",
                  "        pm.expect(response.token).to.exist;",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"Password123\",\n  \"phone\": \"+1234567890\",\n  \"role\": \"customer\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            },
            "description": "Register a new user account"
          },
          "response": []
        },
        {
          "name": "Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('authToken', response.token);",
                  "    pm.environment.set('userId', response.user._id);",
                  "    pm.test('Login successful', function () {",
                  "        pm.expect(response.success).to.be.true;",
                  "        pm.expect(response.token).to.exist;",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"Password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "description": "Login with existing user credentials"
          },
          "response": []
        },
        {
          "name": "Get Current User",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/me",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "me"]
            },
            "description": "Get current logged-in user details"
          },
          "response": []
        },
        {
          "name": "Update Password",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"currentPassword\": \"Password123\",\n  \"newPassword\": \"NewPassword123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/password",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "password"]
            },
            "description": "Update user password"
          },
          "response": []
        },
        {
          "name": "Logout User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/logout",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "logout"]
            },
            "description": "Logout current user"
          },
          "response": []
        },
        {
          "name": "Deactivate Account",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/deactivate",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "deactivate"]
            },
            "description": "Deactivate user account"
          },
          "response": []
        }
      ],
      "description": "Authentication related endpoints"
    },
    {
      "name": "User Profile",
      "item": [
        {
          "name": "Get Profile",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/me/profile",
              "host": ["{{baseUrl}}"],
              "path": ["users", "me", "profile"]
            },
            "description": "Get user profile information"
          },
          "response": []
        },
        {
          "name": "Update Profile",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"John Smith\",\n  \"phone\": \"+1987654321\",\n  \"profilePicture\": \"https://example.com/profile.jpg\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/me/profile",
              "host": ["{{baseUrl}}"],
              "path": ["users", "me", "profile"]
            },
            "description": "Update user profile information"
          },
          "response": []
        }
      ],
      "description": "User profile management endpoints"
    },
    {
      "name": "Address Management",
      "item": [
        {
          "name": "Get All Addresses",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/me/addresses",
              "host": ["{{baseUrl}}"],
              "path": ["users", "me", "addresses"]
            },
            "description": "Get all user addresses"
          },
          "response": []
        },
        {
          "name": "Add New Address",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('addressId', response.address._id);",
                  "    pm.test('Address created successfully', function () {",
                  "        pm.expect(response.success).to.be.true;",
                  "        pm.expect(response.address._id).to.exist;",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"label\": \"Home\",\n  \"street\": \"123 Main Street\",\n  \"city\": \"New York\",\n  \"state\": \"NY\",\n  \"zipCode\": \"10001\",\n  \"location\": {\n    \"coordinates\": [-74.0059, 40.7128]\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/me/addresses",
              "host": ["{{baseUrl}}"],
              "path": ["users", "me", "addresses"]
            },
            "description": "Add a new address for the user"
          },
          "response": []
        },
        {
          "name": "Get Single Address",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/me/addresses/{{addressId}}",
              "host": ["{{baseUrl}}"],
              "path": ["users", "me", "addresses", "{{addressId}}"]
            },
            "description": "Get a specific address by ID"
          },
          "response": []
        },
        {
          "name": "Update Address",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"label\": \"Home Updated\",\n  \"street\": \"456 Oak Avenue\",\n  \"city\": \"Brooklyn\",\n  \"state\": \"NY\",\n  \"zipCode\": \"11201\",\n  \"location\": {\n    \"coordinates\": [-73.9903, 40.6892]\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/me/addresses/{{addressId}}",
              "host": ["{{baseUrl}}"],
              "path": ["users", "me", "addresses", "{{addressId}}"]
            },
            "description": "Update an existing address"
          },
          "response": []
        },
        {
          "name": "Delete Address",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/me/addresses/{{addressId}}",
              "host": ["{{baseUrl}}"],
              "path": ["users", "me", "addresses", "{{addressId}}"]
            },
            "description": "Delete an address"
          },
          "response": []
        }
      ],
      "description": "Address management endpoints"
    },
    {
      "name": "Test Cases",
      "item": [
        {
          "name": "Invalid Registration - Missing Fields",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test User\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            },
            "description": "Test validation errors for missing required fields"
          },
          "response": []
        },
        {
          "name": "Invalid Registration - Weak Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test User\",\n  \"email\": \"test@example.com\",\n  \"password\": \"123\",\n  \"phone\": \"+1234567890\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            },
            "description": "Test password validation"
          },
          "response": []
        },
        {
          "name": "Invalid Login - Wrong Credentials",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"wrong@example.com\",\n  \"password\": \"wrongpassword\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "description": "Test login with invalid credentials"
          },
          "response": []
        },
        {
          "name": "Unauthorized Access - No Token",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/me",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "me"]
            },
            "description": "Test accessing protected route without token"
          },
          "response": []
        },
        {
          "name": "Invalid Address - Missing Required Fields",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"label\": \"Incomplete Address\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/me/addresses",
              "host": ["{{baseUrl}}"],
              "path": ["users", "me", "addresses"]
            },
            "description": "Test address validation with missing fields"
          },
          "response": []
        },
        {
          "name": "Invalid MongoDB ObjectId",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/me/addresses/invalid-id",
              "host": ["{{baseUrl}}"],
              "path": ["users", "me", "addresses", "invalid-id"]
            },
            "description": "Test ObjectId validation with invalid ID"
          },
          "response": []
        }
      ],
      "description": "Test cases for error handling and validation"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script",
          "console.log('Making request to: ' + pm.request.url);"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "pm.test('Response time is less than 2000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(2000);",
          "});",
          "",
          "pm.test('Response has success field', function () {",
          "    const jsonData = pm.response.json();",
          "    pm.expect(jsonData).to.have.property('success');",
          "});"
        ]
      }
    }
  ]
}
